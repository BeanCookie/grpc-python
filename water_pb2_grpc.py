# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import water_pb2 as water__pb2


class WaterCompanyStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuyStreamWater = channel.unary_stream(
                '/water.WaterCompany/BuyStreamWater',
                request_serializer=water__pb2.WaterRequest.SerializeToString,
                response_deserializer=water__pb2.WaterReply.FromString,
                )
        self.BuyWater = channel.unary_unary(
                '/water.WaterCompany/BuyWater',
                request_serializer=water__pb2.WaterRequest.SerializeToString,
                response_deserializer=water__pb2.WaterReply.FromString,
                )


class WaterCompanyServicer(object):
    """The greeting service definition.
    """

    def BuyStreamWater(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyWater(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WaterCompanyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuyStreamWater': grpc.unary_stream_rpc_method_handler(
                    servicer.BuyStreamWater,
                    request_deserializer=water__pb2.WaterRequest.FromString,
                    response_serializer=water__pb2.WaterReply.SerializeToString,
            ),
            'BuyWater': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyWater,
                    request_deserializer=water__pb2.WaterRequest.FromString,
                    response_serializer=water__pb2.WaterReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'water.WaterCompany', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WaterCompany(object):
    """The greeting service definition.
    """

    @staticmethod
    def BuyStreamWater(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/water.WaterCompany/BuyStreamWater',
            water__pb2.WaterRequest.SerializeToString,
            water__pb2.WaterReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyWater(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/water.WaterCompany/BuyWater',
            water__pb2.WaterRequest.SerializeToString,
            water__pb2.WaterReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
